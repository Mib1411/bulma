@use "sass:math";
@use "../utilities/css-variables" as cv;
@use "../utilities/derived-variables" as dv;
@use "../utilities/initial-variables" as iv;
@use "../utilities/extends";
@use "../utilities/mixins" as mx;

$column-gap: 12px !default;
$column-count: 12 !default;

:root {
  @include cv.register-vars(
    (
      "column-gap": #{$column-gap},
    )
  );
}

.#{iv.$class-prefix}column {
  display: block;
  flex-basis: 0;
  flex-grow: 1;
  flex-shrink: 1;
  padding: cv.getVar("column-gap");

  @for $i from 0 through $column-count {
    .#{iv.$class-prefix}columns.#{iv.$class-prefix}is-mobile
      > &.#{iv.$class-prefix}is-#{$i} {
      flex: none;
      width: math.percentage(math.div($i, $column-count));
    }

    .#{iv.$class-prefix}columns.#{iv.$class-prefix}is-mobile
      > &.#{iv.$class-prefix}is-offset-#{$i} {
      margin-inline-start: math.percentage(math.div($i, $column-count));
    }
  }

  @include mx.mobile {
    &.#{iv.$class-prefix}is-narrow-mobile {
      flex: none;
      width: unset;
    }


    @for $i from 0 through $column-count {
      &.#{iv.$class-prefix}is-#{$i}-mobile {
        flex: none;
        width: math.percentage(math.div($i, $column-count));
      }

      &.#{iv.$class-prefix}is-offset-#{$i}-mobile {
        margin-inline-start: math.percentage(math.div($i, $column-count));
      }
    }
  }

  @include mx.tablet {
    &.#{iv.$class-prefix}is-narrow-tablet {
      flex: none;
      width: unset;
    }


    @for $i from 0 through $column-count {
      &.#{iv.$class-prefix}is-#{$i}-tablet {
        flex: none;
        width: math.percentage(math.div($i, $column-count));
      }

      &.#{iv.$class-prefix}is-offset-#{$i}-tablet {
        margin-inline-start: math.percentage(math.div($i, $column-count));
      }
    }
  }

  @include mx.desktop {
    &.#{iv.$class-prefix}is-narrow-desktop {
      flex: none;
      width: unset;
    }


    @for $i from 0 through $column-count {
      &.#{iv.$class-prefix}is-#{$i}-desktop {
        flex: none;
        width: math.percentage(math.div($i, $column-count));
      }

      &.#{iv.$class-prefix}is-offset-#{$i}-desktop {
        margin-inline-start: math.percentage(math.div($i, $column-count));
      }
    }
  }
  @include mx.widescreen {
    &.#{iv.$class-prefix}is-narrow-widescreen {
      flex: none;
      width: unset;
    }


    @for $i from 0 through $column-count {
      &.#{iv.$class-prefix}is-#{$i}-widescreen {
        flex: none;
        width: math.percentage(math.div($i, $column-count));
      }

      &.#{iv.$class-prefix}is-offset-#{$i}-widescreen {
        margin-inline-start: math.percentage(math.div($i, $column-count));
      }
    }
  }
  @include mx.fullhd {
    &.#{iv.$class-prefix}is-narrow-fullhd {
      flex: none;
      width: unset;
    }


    @for $i from 0 through $column-count {
      &.#{iv.$class-prefix}is-#{$i}-fullhd {
        flex: none;
        width: math.percentage(math.div($i, $column-count));
      }

      &.#{iv.$class-prefix}is-offset-#{$i}-fullhd {
        margin-inline-start: math.percentage(math.div($i, $column-count));
      }
    }
  }
  @include mx.ultrahd {
    &.#{iv.$class-prefix}is-narrow-ultrahd {
      flex: none;
      width: unset;
    }


    @for $i from 0 through $column-count {
      &.#{iv.$class-prefix}is-#{$i}-ultrahd {
        flex: none;
        width: math.percentage(math.div($i, $column-count));
      }

      &.#{iv.$class-prefix}is-offset-#{$i}-ultrahd {
        margin-inline-start: math.percentage(math.div($i, $column-count));
      }
    }
  }

.#{iv.$class-prefix}columns {
  margin-inline-start: calc(-1 * #{cv.getVar("column-gap")});
  margin-inline-end: calc(-1 * #{cv.getVar("column-gap")});
  margin-top: calc(-1 * #{cv.getVar("column-gap")});

  &:last-child {
    margin-bottom: calc(-1 * #{cv.getVar("column-gap")});
  }

  &:not(:last-child) {
    margin-bottom: calc(
      #{cv.getVar("block-spacing")} - #{cv.getVar("column-gap")}
    );
  }

  // Modifiers
  &.#{iv.$class-prefix}is-centered {
    justify-content: center;
  }

  &.#{iv.$class-prefix}is-gapless {
    margin-inline-start: 0;
    margin-inline-end: 0;

    margin-top: 0;

    & > .#{iv.$class-prefix}column {
      margin: 0;
      padding: 0 !important;
    }

    &:not(:last-child) {
      margin-bottom: 1.5rem;
    }

    &:last-child {
      margin-bottom: 0;
    }
  }

  &.#{iv.$class-prefix}is-mobile {
    display: flex;
  }

  &.#{iv.$class-prefix}is-multiline {
    flex-wrap: wrap;
  }

  &.#{iv.$class-prefix}is-vcentered {
    align-items: center;
  }

  // Responsiveness
  @include mx.tablet {
    &:not(.#{iv.$class-prefix}is-desktop) {
      display: flex;
    }
  }

  @include mx.desktop {
    // Modifiers
    &.#{iv.$class-prefix}is-desktop {
      display: flex;
    }
  }

  @for $i from 0 through 8 {
    &.#{iv.$class-prefix}is-#{$i} {
      @include cv.register-vars(
        (
          "column-gap": #{$i * 0.25rem},
        )
      );
    }

    @include mx.mobile {
      &.#{iv.$class-prefix}is-#{$i}-mobile {
        @include cv.register-vars(
          (
            "column-gap": #{$i * 0.25rem},
          )
        );
      }
    }

    @include mx.tablet {
      &.#{iv.$class-prefix}is-#{$i}-tablet {
        @include cv.register-vars(
          (
            "column-gap": #{$i * 0.25rem},
          )
        );
      }
    }

    @include mx.tablet-only {
      &.#{iv.$class-prefix}is-#{$i}-tablet-only {
        @include cv.register-vars(
          (
            "column-gap": #{$i * 0.25rem},
          )
        );
      }
    }

    @include mx.touch {
      &.#{iv.$class-prefix}is-#{$i}-touch {
        @include cv.register-vars(
          (
            "column-gap": #{$i * 0.25rem},
          )
        );
      }
    }

    @include mx.desktop {
      &.#{iv.$class-prefix}is-#{$i}-desktop {
        @include cv.register-vars(
          (
            "column-gap": #{$i * 0.25rem},
          )
        );
      }
    }

    @include mx.desktop-only {
      &.#{iv.$class-prefix}is-#{$i}-desktop-only {
        @include cv.register-vars(
          (
            "column-gap": #{$i * 0.25rem},
          )
        );
      }
    }

    @include mx.widescreen {
      &.#{iv.$class-prefix}is-#{$i}-widescreen {
        @include cv.register-vars(
          (
            "column-gap": #{$i * 0.25rem},
          )
        );
      }
    }

    @include mx.widescreen-only {
      &.#{iv.$class-prefix}is-#{$i}-widescreen-only {
        @include cv.register-vars(
          (
            "column-gap": #{$i * 0.25rem},
          )
        );
      }
    }
    @include mx.fullhd-only {
      &.#{iv.$class-prefix}is-#{$i}-fullhd-only {
        @include cv.register-vars(
          (
            "column-gap": #{$i * 0.25rem},
          )
        );
      }
    }

    @include mx.fullhd {
      &.#{iv.$class-prefix}is-#{$i}-fullhd {
        @include cv.register-vars(
          (
            "column-gap": #{$i * 0.25rem},
          )
        );
      }
    }
    @include mx.ultrahd {
      &.#{iv.$class-prefix}is-#{$i}-ultrahd {
        @include cv.register-vars(
          (
            "column-gap": #{$i * 0.25rem},
          )
        );
      }
    }

  }
}
